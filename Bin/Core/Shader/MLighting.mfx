
Pass
{
	State
	{
		CullMode INHERIT
		DepthMode N_LESS_EQUAL
		BlendMode ADD
	}
	
	Uniform
	{
		u_World 			WORLD_MATRIX
		u_BoneTM			BONE_MATRIX
		u_ViewProj			VIEW_PROJ_MATRIX
		
		u_LightPos			LIGHT_POSITION
		u_LightDir			LIGHT_DIRECTION
		u_LightAttenParam	LIGHT_ATTEN_PARAM
		u_LightSpotParam	LIGHT_SPOT_PARAM
		
		u_Diffuse 			DIFFUSE
		
		u_ShaderState		SHADER_STATE
	}
	
	Attribute
	{
		i_Position			POSITION
		i_Normal 			NORMAL
		i_Texcoord 			TEXCOORD0
		i_BoneIndex			BONE_INDEX
		i_BoneWeight 		BONE_WEIGHT
	}
	
	Sampler
	{
		Index 				0 
		BindType 			DIFFUSE
		Filter 				DEFAULT
		Address 			WRAP
		BorderColor 		0 0 0 0
	}
	
	VertexShader {
		uniform mat4 u_World;
		uniform float4 u_BoneTM[35 * 3];
		uniform mat4 u_ViewProj;

		uniform float4 u_LightPos;
		uniform float4 u_LightDir;
		uniform float4 u_LightAttenParam;
		uniform float4 u_LightSpotParam;

		uniform float4 u_Diffuse;

		attribute float4 i_Position;
		attribute float4 i_Normal;
		attribute float4 i_Texcoord;
		attribute float4 i_BoneIndex;
		attribute float4 i_BoneWeight;

		varying float2 o_uv;
		varying float4 o_color;

		void doHwSkin(out float4 position, out float3 normal)
		{
			int i0 = int(i_BoneIndex.x) * 3;
			int i1 = int(i_BoneIndex.y) * 3;
			int i2 = int(i_BoneIndex.z) * 3;
			int i3 = int(i_BoneIndex.w) * 3;

			float4 w = i_BoneWeight;
	
			float4 m[3];
			m[0] = u_BoneTM[i0 + 0] * w.x + u_BoneTM[i1 + 0] * w.y + u_BoneTM[i2 + 0] * w.z + u_BoneTM[i3 + 0] * w.w;
			m[1] = u_BoneTM[i0 + 1] * w.x + u_BoneTM[i1 + 1] * w.y + u_BoneTM[i2 + 1] * w.z + u_BoneTM[i3 + 1] * w.w;
			m[2] = u_BoneTM[i0 + 2] * w.x + u_BoneTM[i1 + 2] * w.y + u_BoneTM[i2 + 2] * w.z + u_BoneTM[i3 + 2] * w.w;

			float4 p;
			p.x = dot(i_Position, m[0]);
			p.y = dot(i_Position, m[1]);
			p.z = dot(i_Position, m[2]);
			p.w = 1.0;

			float3 n;
			n.x = dot(i_Normal.xyz, m[0].xyz);
			n.y = dot(i_Normal.xyz, m[1].xyz);
			n.z = dot(i_Normal.xyz, m[2].xyz);
			n = normalize(n);

			position = p;
			normal = n;
		}

		void main()
		{
			float4 position;
			float3 normal;

		#ifdef D_SKINED
			doHwSkin(position, normal);
		#else
			position = transform4(i_Position, u_World);
			normal = transform3(i_Normal.xyz, u_World);
			normal = normalize(normal);
		#endif

			gl_Position = u_ViewProj * position;
			o_uv = i_Texcoord.xy;

			float ka = 1.0, kd = 1.0;

#if defined(DIRECTION)
			float3 N = normal;
			float3 L = u_LightDir.xyz;

			kd = max(0.0, dot(N, L));

#elif defined(POINT)
			float3 lightDir = u_LightPos.xyz - position.xyz;
			float dist = length(lightDir);
			
			float3 N = normal;
			float3 L = normalize(lightDir);
			
			kd = max(0.0, dot(N, L));
			
			ka = 1.0 - clamp((dist - u_LightAttenParam.x) * u_LightAttenParam.z, 0.0, 1.0);
			ka = pow(ka, u_LightAttenParam.w);

#elif defined (SPOT)
			float3 spotDir = u_LightPos.xyz - position.xyz;
			float dist = length(spotDir);
			
			float3 S = normalize(spotDir);
			float3 N = normal;
			float3 L = u_LightDir.xyz;
			
			kd = max(0.0, dot(N, L));
			
			ka = 1.0 - clamp((dist - u_LightAttenParam.x) * u_LightAttenParam.z, 0.0, 1.0);
			ka = pow(ka, u_LightAttenParam.w);
			
			float ki = max(0.0, dot(S, L));
			ki = clamp((ki - u_LightSpotParam.x) * u_LightSpotParam.z, 0.0, 1.0);
			ki = pow(ki, u_LightSpotParam.w);

			kd *= ki;
#endif 
			o_color.rgb = ka * kd * u_Diffuse.rgb;
			o_color.a = 1.0;
		}
	}
	
	PixelShader {
		precision highp float;
		precision mediump int;

		varying float2 o_uv;
		varying float4 o_color;
		
		uniform float4 u_ShaderState;

		uniform sampler2D u_baseMap;

		void main()
		{
			float4 baseColor = tex2D(u_baseMap, o_uv);

			// Alpha Test
			if (u_ShaderState.x > 0.5)
			{
				if (baseColor.a < 0.5)
					discard;
			}

			gl_FragColor = baseColor * o_color;
		}
	}
}
