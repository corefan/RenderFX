Pass
{
	State
	{
		CullMode 			INHERIT
		DepthMode 			INHERIT
		BlendMode 			INHERIT
	}
	
	Uniform
	{
		u_WVP WORLD_VIEW_PROJ_MATRIX
		
		u_FogColor FOG_COLOR
		u_FogParam FOG_PARAM
		
		u_ShaderState SHADER_STATE
	}
	
	Attribute
	{
		i_Position POSITION
		i_LightingColor LIGHTING_COLOR
		i_UV TEXCOORD0
	}
	
	Sampler
	{
		Index 0
		BindType DIFFUSE
		Filter DEFAULT
		Address WRAP
		BorderColor 0 0 0 0
	}
	
	VertexShader {
		precision highp float;
		precision mediump int;

		uniform mat4 u_WVP;

		uniform float4 u_FogColor;
		uniform float4 u_FogParam;

		attribute float4 i_Position;
		attribute float4 i_LightingColor;
		attribute float2 i_UV;

		varying float2 o_uv;
		varying float4 o_color;
		varying float4 o_fog;

		float4 rgbe_to_rgba(float4 color)
		{
			float4 c;

			float e = color.a / 255.0 * 2.0 + 1.0;
			c.r = color.r / 255.0 * e;
			c.g = color.g / 255.0 * e;
			c.b = color.b / 255.0 * e;
			c.a = 1.0;

			return c;
		}

		void main()
		{
			gl_Position = transform4(i_Position, u_WVP);
			o_uv = i_UV;
			o_color = rgbe_to_rgba(i_LightingColor);

			// fog
			float dt = gl_Position.w;
			o_fog.rgb = u_FogColor.rgb;
			o_fog.a = clamp((dt - u_FogParam.x) * u_FogParam.z, 0.0, 1.0);
		}
	}
	
	PixelShader {
			precision highp float;
			precision mediump int;

			varying float2 o_uv;
			varying float4 o_color;
			varying float4 o_fog;
		
			uniform float4 u_ShaderState;
			
			uniform sampler2D u_baseMap;

			void main()
			{
				float4 baseColor = tex2D(u_baseMap, o_uv);

				// Alpha Test
				if (u_ShaderState.x > 0.5)
				{
					if (baseColor.a < 0.5)
						discard;
				}

				gl_FragColor.rgb = baseColor.rgb * o_color.rgb;
				gl_FragColor.rgb = gl_FragColor.rgb * (1.0 - o_fog.a) + o_fog.rgb * o_fog.a;
				gl_FragColor.a = baseColor.a;
			}
	}
}
