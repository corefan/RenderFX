Pass
{
	State
	{
		CullMode 			INHERIT
		DepthMode 			INHERIT
		BlendMode 			INHERIT
	}
	
	Uniform
	{
		u_World 			WORLD_MATRIX
		u_BoneTM			BONE_MATRIX
		u_ViewProj			VIEW_PROJ_MATRIX
	
		u_LightDir			LIGHT_DIRECTION
		
		u_Ambient 			AMBIENT
		u_Diffuse 			DIFFUSE
		u_Opacity 			OPACITY
		
		u_FogColor 			FOG_COLOR
		u_FogParam 			FOG_PARAM
		
		u_ShaderState		SHADER_STATE
	}
	
	Attribute
	{
		i_Position			POSITION
		i_Normal 			NORMAL
		i_Texcoord 			TEXCOORD0
		i_BoneIndex			BONE_INDEX
		i_BoneWeight 		BONE_WEIGHT
	}
	
	Sampler
	{
		Index 				0 
		BindType 			DIFFUSE
		Filter 				DEFAULT
		Address 			WRAP
		BorderColor 		0 0 0 0
	}
	
	VertexShader {
		uniform mat4 u_World;
		uniform float4 u_BoneTM[35 * 3];
		uniform mat4 u_ViewProj;

		uniform float4 u_LightDir;

		uniform float4 u_Ambient;
		uniform float4 u_Diffuse;
		uniform float4 u_Opacity;

		uniform float4 u_FogColor;
		uniform float4 u_FogParam;
      
		attribute float4 i_Position;
		attribute float4 i_Normal;
		attribute float4 i_Texcoord;
		attribute float4 i_BoneIndex;
		attribute float4 i_BoneWeight;

		varying float2 o_uv;
		varying float4 o_color;
		varying float4 o_fog;

		void doHwSkin(out float4 position, out float3 normal)
		{
			int i0 = int(i_BoneIndex.x) * 3;
			int i1 = int(i_BoneIndex.y) * 3;
			int i2 = int(i_BoneIndex.z) * 3;
			int i3 = int(i_BoneIndex.w) * 3;

			float4 w = i_BoneWeight;
	
			float4 m[3];
			m[0] = u_BoneTM[i0 + 0] * w.x + u_BoneTM[i1 + 0] * w.y + u_BoneTM[i2 + 0] * w.z + u_BoneTM[i3 + 0] * w.w;
			m[1] = u_BoneTM[i0 + 1] * w.x + u_BoneTM[i1 + 1] * w.y + u_BoneTM[i2 + 1] * w.z + u_BoneTM[i3 + 1] * w.w;
			m[2] = u_BoneTM[i0 + 2] * w.x + u_BoneTM[i1 + 2] * w.y + u_BoneTM[i2 + 2] * w.z + u_BoneTM[i3 + 2] * w.w;

			float4 p;
			p.x = dot(i_Position, m[0]);
			p.y = dot(i_Position, m[1]);
			p.z = dot(i_Position, m[2]);
			p.w = 1.0;

			float3 n;
			n.x = dot(i_Normal.xyz, m[0].xyz);
			n.y = dot(i_Normal.xyz, m[1].xyz);
			n.z = dot(i_Normal.xyz, m[2].xyz);
			n = normalize(n);

			position = p;
			normal = n;
		}

		void main()
		{
			float4 position;
			float3 normal;

		#ifdef D_SKINED
			doHwSkin(position, normal);
		#else
			position = transform4(i_Position, u_World);
			normal = transform3(i_Normal.xyz, u_World);
		#endif

			// 
			gl_Position = transform4(position, u_ViewProj);
			o_uv = i_Texcoord.xy;

			// lighting
			float3 N = normalize(normal);
			float3 L = u_LightDir.xyz;
        
			float kd = max(0.0, dot(N, L));

			o_color.rgb = u_Ambient.rgb + kd * u_Diffuse.rgb;
			o_color.a = u_Opacity.r;

			// fog
			float dt = gl_Position.w;
			o_fog.rgb = u_FogColor.rgb;
			o_fog.a = clamp((dt - u_FogParam.x) * u_FogParam.z, 0.0, 1.0);
		}
	}
	
	PixelShader {
		precision highp float;
		precision mediump int;

		varying float2 o_uv;
		varying float4 o_color;
		varying float4 o_fog;
		
		uniform float4 u_ShaderState;
		uniform sampler2D u_baseMap;

		void main()
		{
			float4 baseColor = tex2D(u_baseMap, o_uv);

			// Alpha Test
			if (u_ShaderState.x > 0.5)
			{
				if (baseColor.a < 0.5)
					discard;
			}

			gl_FragColor.rgb = baseColor.rgb * o_color.rgb;;
			gl_FragColor.rgb = gl_FragColor.rgb * (1.0 - o_fog.a) + o_fog.rgb * o_fog.a;
			gl_FragColor.a = baseColor.a * o_color.a;
		}
	}
}

