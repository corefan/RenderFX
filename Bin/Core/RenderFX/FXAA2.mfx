Pass
{
	State
	{
		CullMode NONE
		DepthMode NONE
		BlendMode OPACITY
	}

	Uniform
	{
		inv_width_height FLOAT2
	}
	
	Attribute
	{
		i_Position POSITION
		i_Texcoord TEXCOORD0
	}
	
	Sampler
	{
		Index 0 
		BindType NONE
		Filter POINT
		Address CLAMP
		BorderColor 0 0 0 0
	}
	
	VertexShader {
		attribute float4 i_Position;
		attribute float2 i_Texcoord;

		varying float2 o_uv;

		void main()
		{
			gl_Position = float4(i_Position.xy, 0, 1);
			o_uv = i_Texcoord;
		}
	}
	
	PixelShader {
		varying float2 o_uv;

		uniform float2 inv_width_height;

		uniform sampler2D s0;

		float texL(sampler2D tex, float2 uv)
		{
			float3 luma = float3(0.299, 0.587, 0.114);
			float3 color = tex2D(tex, uv).rgb;

			return dot(color, luma);
		}

		float texLGrad(sampler2D tex, float2 uv, float ddx, float ddy)
		{
			float3 luma = float3(0.299, 0.587, 0.114);
			float3 color = texture2DGrad(tex, uv, ddx, ddy).rgb;

			return dot(color, luma);
		}

		// this code from KlayGE
		//
		//
		float3 fxaa()
		{
		#if 1
			float2 grad_x = ddx(o_uv);
			float2 grad_y = ddy(o_uv);
		#else
			float2 grad_x = 0.0;
			float2 grad_y = 0.0;
		#endif
	
			float2 posM = o_uv;
	
			float4 rgbyM = tex2D(s0, o_uv);
			float lumaN = texL(s0, o_uv + float2(+0, -1) * inv_width_height);
			float lumaW = texL(s0, o_uv + float2(-1, +0) * inv_width_height);
			float lumaE = texL(s0, o_uv + float2(+1, +0) * inv_width_height);
			float lumaS = texL(s0, o_uv + float2(+0, +1) * inv_width_height);
			float lumaM = texL(s0, o_uv);

			float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));
			float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));
			float range = rangeMax - rangeMin;
			if (range < max(1.0 / 24.0, rangeMax / 8.0))
			{
				return rgbyM.xyz;
			}

			float lumaNW = texL(s0, o_uv + float2(-1, -1) * inv_width_height);
			float lumaNE = texL(s0, o_uv + float2(+1, -1) * inv_width_height);
			float lumaSW = texL(s0, o_uv + float2(-1, +1) * inv_width_height);
			float lumaSE = texL(s0, o_uv + float2(+1, +1) * inv_width_height);

			float lumaNS = lumaN + lumaS;
			float lumaWE = lumaW + lumaE;
			float subpixRcpRange = 1 / range;
			float subpixNSWE = lumaNS + lumaWE;
			float edgeHorz1 = -2 * lumaM + lumaNS;
			float edgeVert1 = -2 * lumaM + lumaWE;
	
			float lumaNESE = lumaNE + lumaSE;
			float lumaNWNE = lumaNW + lumaNE;
			float edgeHorz2 = -2 * lumaE + lumaNESE;
			float edgeVert2 = -2 * lumaN + lumaNWNE;

			float lumaNWSW = lumaNW + lumaSW;
			float lumaSWSE = lumaSW + lumaSE;
			float edgeHorz4 = abs(edgeHorz1) * 2 + abs(edgeHorz2);
			float edgeVert4 = abs(edgeVert1) * 2 + abs(edgeVert2);
			float edgeHorz3 = -2 * lumaW + lumaNWSW;
			float edgeVert3 = -2 * lumaS + lumaSWSE;
			float edgeHorz = abs(edgeHorz3) + edgeHorz4;
			float edgeVert = abs(edgeVert3) + edgeVert4;
	
			float subpixNWSWNESE = lumaNWSW + lumaNESE;
			float lengthSign = inv_width_height.x;
			bool horzSpan = edgeHorz >= edgeVert;
			float subpixA = subpixNSWE * 2 + subpixNWSWNESE;

			if (!horzSpan)
			{
				lumaN = lumaW;
				lumaS = lumaE;
			}
			else
			{
				lengthSign = inv_width_height.y;
			}
			float subpixB = subpixA / 12 - lumaM;
			float gradientN = lumaN - lumaM;
			float gradientS = lumaS - lumaM;
			float lumaNN = lumaN + lumaM;
			float lumaSS = lumaS + lumaM;
			bool pairN = abs(gradientN) >= abs(gradientS);
			float gradient = max(abs(gradientN), abs(gradientS));
			if (pairN)
			{
				lengthSign = -lengthSign;
			}
			float subpixC = saturate(abs(subpixB) * subpixRcpRange);

			float2 posB = posM;
			float2 offNP;
			if (!horzSpan)
			{
				offNP.x = 0;
				offNP.y = inv_width_height.y;
				posB.x += lengthSign * 0.5f;
			}
			else
			{
				offNP.x = inv_width_height.x;
				offNP.y = 0;
				posB.y += lengthSign * 0.5f;
			}

			float2 posN = posB - offNP;
			float2 posP = posB + offNP;
			float subpixD = -2 * subpixC + 3;
			float lumaEndN = texL(s0, posN);
			float subpixE = subpixC * subpixC;
			float lumaEndP = texL(s0, posP);

			if (!pairN)
			{
				lumaNN = lumaSS;
			}
			float gradientScaled = gradient / 4;
			float lumaMM = lumaM - lumaNN * 0.5f;
			float subpixF = subpixD * subpixE;
			bool lumaMLTZero = lumaMM < 0;

			lumaEndN -= lumaNN * 0.5f;
			lumaEndP -= lumaNN * 0.5f;
			bool doneN = abs(lumaEndN) >= gradientScaled;
			bool doneP = abs(lumaEndP) >= gradientScaled;
			if (!doneN)
			{
				posN -= offNP * 1.5f;
			}
			bool doneNP = (!doneN) || (!doneP);
			if (!doneP)
			{
				posP += offNP * 1.5f;
			}

			float step = 2;
			for (int i = 0; (i < 3) && doneNP; ++ i)
			{
				step *= i + 1;

				if (!doneN)
				{
					lumaEndN = texLGrad(s0, posN.xy, grad_x, grad_y);
					lumaEndN = lumaEndN - lumaNN * 0.5f;
				}
				if (!doneP)
				{
					lumaEndP = texLGrad(s0, posP.xy, grad_x, grad_y);
					lumaEndP = lumaEndP - lumaNN * 0.5f;
				}
				doneN = abs(lumaEndN) >= gradientScaled;
				doneP = abs(lumaEndP) >= gradientScaled;
				if (!doneN)
				{
					posN -= offNP * step;
				}
				doneNP = (!doneN) || (!doneP);
				if (!doneP)
				{
					posP += offNP * step;
				}
			}
	
			float dstN = posM.x - posN.x;
			float dstP = posP.x - posM.x;
			if (!horzSpan)
			{
				dstN = posM.y - posN.y;
				dstP = posP.y - posM.y;
			}

			bool goodSpanN = (lumaEndN < 0) != lumaMLTZero;
			float spanLength = (dstP + dstN);
			bool goodSpanP = (lumaEndP < 0) != lumaMLTZero;
			float spanLengthRcp = 1 / spanLength;

			bool directionN = dstN < dstP;
			float dst = min(dstN, dstP);
			bool goodSpan = directionN ? goodSpanN : goodSpanP;
			float subpixG = subpixF * subpixF;
			float pixelOffset = dst * -spanLengthRcp + 0.5f;
			float subpixH = subpixG * 0.75f;

			float pixelOffsetGood = goodSpan ? pixelOffset : 0;
			float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
			if (!horzSpan)
			{
				posM.x += pixelOffsetSubpix * lengthSign;
			}
			else
			{
				posM.y += pixelOffsetSubpix * lengthSign;
			}

			return tex2D(s0, posM).xyz;
		}

		void main()
		{
			gl_FragColor.rgb = fxaa();
			gl_FragColor.a = 1.0;
		}
	}
}