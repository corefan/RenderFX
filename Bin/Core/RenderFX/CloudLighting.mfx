Pass
{
	State
	{
		CullMode NONE
		DepthMode ALWAYS
		BlendMode OPACITY
	}

	Uniform
	{
		gWeight FLOAT4
		gMass FLOAT1
		gLightingParam FLOAT4
		gSunUV FLOAT4
		gUVScale FLOAT4
		gUVScroll FLOAT4
	}

	Attribute
	{
		i_Position POSITION
		i_Texcoord TEXCOORD0
	}
	
	VertexShader {
		attribute float4 i_Position;
		attribute float2 i_Texcoord;

		varying float2 o_uv;

		void main()
		{
			gl_Position = float4(i_Position.xy, 0, 1);
			o_uv = i_Texcoord;
		}
	}

	Sampler
	{
		Name gTex_Cloud
		Index 0
		BindType NONE
		Filter LINEAR
		Address CLAMP
		BorderColor 0 0 0 0
	}

	Sampler
	{
		Name gTex_Layer1
		Index 1
		BindType NONE
		Filter LINEAR
		Address WRAP
		BorderColor 0 0 0 0
	}

	Sampler
	{
		Name gTex_Layer2
		Index 2
		BindType NONE
		Filter LINEAR
		Address WRAP
		BorderColor 0 0 0 0
	}

	Sampler
	{
		Name gTex_Layer3
		Index 3
		BindType NONE
		Filter LINEAR
		Address WRAP
		BorderColor 0 0 0 0
	}

	Sampler
	{
		Name gTex_Layer4
		Index 4
		BindType NONE
		Filter LINEAR
		Address WRAP
		BorderColor 0 0 0 0
	}
	
	PixelShader {

		varying float2 o_uv;

		uniform float4 gWeight;
		uniform float gMass;
		uniform float4 gLightingParam;
		uniform float4 gSunUV;
		uniform float4 gUVScale;
		uniform float4 gUVScroll;

		uniform sampler2D gTex_Cloud;
		uniform sampler2D gTex_Layer1;
		uniform sampler2D gTex_Layer2;
		uniform sampler2D gTex_Layer3;
		uniform sampler2D gTex_Layer4;

		float Gaussian(float x, float gm)
		{
			gm = 1.0 / gm;

			float e = -x * x * 0.5 * gm * gm;

			return  1.0 / sqrt(3.1415926 * 2) * gm * exp(e);
		}

		void main()
		{
			float uvStep = 1.5 / 1024.0;
			float2 cloudUV = tex2D(gTex_Cloud, o_uv).rg;

			float3 uvRay = float3(gSunUV.xy - cloudUV, gSunUV.z);
			uvRay = normalize(uvRay);
	
			float lighting = 0;
	
			for (int i = 0; i < 4; ++i)
			{
				float2 uv = cloudUV + uvStep * i * uvRay.xy;
				float2 uvLayer1 = uv * gUVScale.x + gUVScroll.xy;
				float2 uvLayer2 = uv * gUVScale.y + gUVScroll.zw;

				float d = tex2D(gTex_Layer1, uvLayer1).r * gWeight.x;
				d += tex2D(gTex_Layer2, uvLayer2).r * gWeight.y;
		
				d -= gMass;
				d = clamp(d, 0.0, 1.0);
		
				float lt = Gaussian(d * gLightingParam.x, 2) / Gaussian(0, 2);
		
				lighting += lt / 16.0;
			};

			for (int i = 4; i < 32; ++i)
			{
				float2 uv = cloudUV + uvStep * i * uvRay.xy;
				float2 uvLayer1 = uv * gUVScale.x + gUVScroll.xy;
				float2 uvLayer2 = uv * gUVScale.y + gUVScroll.zw;

				float d = tex2D(gTex_Layer1, uvLayer1).r * gWeight.x;
				d += tex2D(gTex_Layer2, uvLayer2).r * gWeight.y;
		
				d -= gMass;
				d = clamp(d, 0.0, 1.0);
		
				float lt = Gaussian(d * gLightingParam.x, 2) / Gaussian(0, 2);
		
				lighting += lt / 32.0;
			};

			gl_FragColor = float4(lighting, lighting, lighting, 1);
		}
	}
}
