Pass
{
	State
	{
		CullMode NONE
		DepthMode LESS_EQUAL
		BlendMode OPACITY
	}
	
	Uniform
	{
		matVP VIEW_PROJ_MATRIX
		matV VIEW_MATRIX

		gCameraPos FLOAT3

		gWorldCornerLeftTop FLOAT4
		gWorldCornerRightDir FLOAT4
		gWorldCornerDownDir FLOAT4

		gViewCornerLeftTop FLOAT4
		gViewCornerRightDir FLOAT4
		gViewCornerDownDir FLOAT4

		gDeepColor FLOAT4
		gRefractionDist FLOAT1

		gSunDir FLOAT3
		gSunColor FLOAT3
		gSunLightParam FLOAT4

		gNoiseScale FLOAT1
		gNoiseUVParam FLOAT4

		gNormalUVParam FLOAT4 [count 4]
		gNormalWeight FLOAT4

		gInvScreenSize FLOAT4
		gFarClip FLOAT4
	}
	
	Attribute
	{
		i_Position POSITION
		i_Normal NORMAL
	}
	
	VertexShader {
		
		attribute float4 i_Position;
		attribute float3 i_Normal;

		varying float3 o_normal;
		varying float3 o_worldPos;
		varying float3 o_viewPos;
		varying float4 o_projPos;

		uniform mat4 matVP;
		uniform mat4 matV;

		void main()
		{
			float4 worldPos = i_Position;

			gl_Position = transform4(worldPos, matVP);
			o_normal = i_Normal;
			o_worldPos = worldPos.xyz;
			o_viewPos = transform4(worldPos, matV).xyz;
			o_projPos = gl_Position;
		}
	}

	Sampler
	{
		Name gTex_Wave
		BindType NONE
		Filter 	DEFAULT
		Address WRAP
	}

	Sampler
	{
		Name gTex_Depth
		BindType NONE
		Filter 	POINT
		Address CLAMP
	}

	Sampler
	{
		Name gTex_Refr
		BindType NONE
		Filter 	POINT
		Address CLAMP
	}

	Sampler
	{
		Name gTex_Refl
		BindType NONE
		Filter 	POINT
		Address CLAMP
	}

	Sampler
	{
		Name gTex_Fresnel
		BindType NONE
		Filter 	DEFAULT
		Address CLAMP
	}

	Sampler
	{
		Name gTex_Normal0
		BindType NONE
		Filter 	DEFAULT
		Address WRAP
	}

	Sampler
	{
		Name gTex_Normal1
		BindType NONE
		Filter 	DEFAULT
		Address WRAP
	}
	
	PixelShader {
		varying float3 o_normal;
		varying float3 o_worldPos;
		varying float3 o_viewPos;
		varying float4 o_projPos;

		uniform float3 gCameraPos;

		uniform float4 gWorldCornerLeftTop;
		uniform float4 gWorldCornerRightDir;
		uniform float4 gWorldCornerDownDir;

		uniform float4 gViewCornerLeftTop;
		uniform float4 gViewCornerRightDir;
		uniform float4 gViewCornerDownDir;

		uniform float4 gDeepColor;
		uniform float gRefractionDist;

		uniform float3 gSunDir;
		uniform float3 gSunColor;
		uniform float4 gSunLightParam;

		uniform float gNoiseScale;
		uniform float4 gNoiseUVParam;

		uniform float4 gNormalUVParam[4];
		uniform float4 gNormalWeight;

		uniform float4 gInvScreenSize;
		uniform float4 gFarClip;

		uniform sampler2D gTex_Wave;
		uniform sampler2D gTex_Depth;
		uniform sampler2D gTex_Refr;
		uniform sampler2D gTex_Refl;
		uniform sampler2D gTex_Fresnel;
		uniform sampler2D gTex_Normal0;
		uniform sampler2D gTex_Normal1;

		float3 CalcuNoise(float3 pos)
		{
			float2 uv0 = pos.xz * gNoiseUVParam.xy + gNoiseUVParam.zw;
	
			float3 noise = tex2D(gTex_Wave, uv0).rgb - 0.5;
	
			return gNoiseScale * noise;
		}

		float3 CalcuNormal(float3 pos, float3 normal, float3 noise)
		{
			float2 uv0 = pos.xz * gNormalUVParam[0].xy + gNormalUVParam[0].zw + noise.xy;
			float2 uv1 = pos.xz * gNormalUVParam[1].xy + gNormalUVParam[1].zw + noise.xy;
			float2 uv2 = pos.xz * gNormalUVParam[2].xy + gNormalUVParam[2].zw + noise.xy;
			float2 uv3 = pos.xz * gNormalUVParam[3].xy + gNormalUVParam[3].zw + noise.xy;

			float3 nrm0 = (tex2D(gTex_Normal0, uv0).rgb * 2 - 1) * gNormalWeight.x;	
			float3 nrm1 = (tex2D(gTex_Normal0, uv1).rgb * 2 - 1) * gNormalWeight.y;	
			float3 nrm2 = (tex2D(gTex_Normal1, uv2).rgb * 2 - 1) * gNormalWeight.z;
			float3 nrm3 = (tex2D(gTex_Normal1, uv3).rgb * 2 - 1) * gNormalWeight.w;
	
			float3 nrm = nrm0 + nrm1 + nrm2 + nrm3;

			normal = normalize(normal);
			normal.xz += nrm.xy;
	
			return normalize(normal);
		}

		float CalcuDeepWeight(float2 projUV, float3 wpos, float3 vpos)
		{
			float diff0, diff1;
			float d = tex2D(gTex_Depth, projUV).r;

			{
				float4 p = gWorldCornerLeftTop + gWorldCornerRightDir * projUV.x + gWorldCornerDownDir * projUV.y;
				float3 pos = gCameraPos + p.xyz * d;
				diff0 = wpos.y - pos.y;
			}
	
			{
				float4 p = gViewCornerLeftTop + gViewCornerRightDir * projUV.x + gViewCornerDownDir * projUV.y;
				float3 pos = p.xyz * d;
				diff1 = length(pos - vpos);
			}
	
			float k0 = clamp(diff0 / gRefractionDist, 0.0, 1.0);
			float k1 = clamp(diff1 / gRefractionDist, 0.0, 1.0);

			float k = k0 * 0.5 + k1 * 0.5;
			float kv = min(1, (length(vpos) - 500) / 5000);
	
			k = min(1, k);
			k = lerp(k, 1, kv);

			return k;
		}

		float3 CalcuSunColor(float3 normal, float3 eyeDir)
		{
			float3 reflV = reflect(-eyeDir, normal);
			float dp = max(0.0, dot(reflV, gSunDir));
			float ks = gSunLightParam.x * pow(dp, gSunLightParam.y);

			return ks * gSunColor;
		}

		float2 CalcuNoiseIncUV(float2 projUV, float2 incUV, float3 vpos)
		{
			float d1 = vpos.z;
			float d2 = tex2D(gTex_Depth, projUV + incUV).r * gFarClip.x;

			return incUV * (d2 > d1);
		}

		float CalcuSmoothFactor(float2 projUV, float3 vpos)
		{
			float d1 = vpos.z;
			float d2 = tex2D(gTex_Depth, projUV).r * gFarClip.x;

			float s = saturate((d2 - d1) / 100);

			float k = saturate((d2 - 2000) / 8000);

			s = lerp(s, 1, k);

			return s;
		}

		float CalcuFresnel(float3 normal, float3 eyeDir)
		{
			float dp = dot(normal, eyeDir);
			return tex2D(gTex_Fresnel, float2(dp, 0)).r;
		}

		void main()
		{
		#ifdef D_OGL
			float2 projUV = o_projPos.xy / o_projPos.w * float2(0.5, 0.5) + 0.5;
		#else
			float2 projUV = o_projPos.xy / o_projPos.w * float2(0.5, -0.5) + 0.5;
		#endif

			float3 noise = CalcuNoise(o_worldPos);
	
			float3 eyeDir = normalize(gCameraPos - o_worldPos);
	
			float3 normal = CalcuNormal(o_worldPos, o_normal, noise);

			float smooth = CalcuSmoothFactor(projUV, o_viewPos);
	
			float2 noiseUV = CalcuNoiseIncUV(projUV, normal.xz * 0.04, o_viewPos);
			float2 refrUV = projUV + noiseUV * smooth;
			float2 reflUV = projUV + normal.xz * 0.065 * smooth;

			float4 refrColor = tex2D(gTex_Refr, refrUV);
			float4 reflColor = tex2D(gTex_Refl, reflUV);

			float weight = CalcuDeepWeight(refrUV, o_worldPos, o_viewPos);

			refrColor = lerp(refrColor, gDeepColor, weight);
			reflColor = reflColor;

			float fresnel = CalcuFresnel(normal, eyeDir);

			float4 col = lerp(refrColor, reflColor, fresnel * smooth);
			col.rgb += CalcuSunColor(normal, eyeDir) * smooth;
			col.a = 1;
	
			gl_FragColor = col;
		}
	}
}
